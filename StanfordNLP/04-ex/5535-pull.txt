``` coffee@directoryProviders.unshift(provider)```
Do we need to be able to define alternative `Directory` implementations for local paths? Because it'd be nice to have the most common case be first in line, rather than last. We would just have to have `DefaultDirectoryProvider` return `null` if the `uri` argument had a protocol other than `file://`.That way the `Project` would be able to tell if a given path was usable or not, possibly throwing an exception like this:```Could not open a directory for the URI 'ftp://some-host/some/path'.You need to install a package which implements the 'atom.directory-provider' service for that URI.```Also, we could then rename `DefaultDirectoryProvider` to `LocalDirectoryProvider`, which seems more descriptive to me.@bolinfest, @atom/core thoughts?
:+1: @maxbrunsfeld I agree with your thoughts on this. It also ties into @bolinfest's idea about having package metadata for the service provider prefix. Another wild thought... could we use the provider's service name make the protocol explicit? `atom.directory-provider.webdav`? Not sure it's a good idea.
My gut says it's better to let the provider perform ad-hoc logic to decide if it can open the URI or not. For example, our default directory provider can work with `/the/path` or `file://the/path`.
@bolinfest You're largely responsible for pushing me toward avoiding the requirement of running code to make these kinds of decisions. What do you think?
I agree with @maxbrunsfeld that if this put is in a spot where you had touse a file:// uri instead of a path everywhere, that would be veryfrustrating.On Thursday, February 19, 2015, Nathan Sobo notifications@github.comwrote:> In src/project.coffee> https://github.com/atom/atom/pull/5535#discussion_r25039685:> > > @@ -39,6 +39,14 @@ class Project extends Model> >      @emitter = new Emitter> >      @buffers ?= []> > -    @directoryProviders = [new DefaultDirectoryProvider()]> > -    atom.packages.serviceHub.consume(> > -      'atom.directory-provider',> > -      '^0.1.0',> > -      # New providers are added to the front of @directoryProviders because> > -      # DefaultDirectoryProvider is a catch-all that will always provide a Directory.> > -      (provider) => @directoryProviders.splice(0, 0, provider))> > @bolinfest https://github.com/bolinfest You're largely responsible for> pushing me toward avoiding the requirement of running code to make these> kinds of decisions. What do you think?> > —> Reply to this email directly or view it on GitHub> https://github.com/atom/atom/pull/5535/files#r25039685.
Alright, we can use some other metadata mechanism if we need to. I'm a go on this.
I think this `String` return value makes the method interface a little too complex. What's the use case that you're thinking of where this uniqueness check needs to defined by the provider, rather than just being done inside the project? Maybe we can solve the problem a different way.
The problem is that normalize() was being called on the path before the directory provider was being consulted, which is not appropriate for URIs. It's not clear to me that `Project` should be responsible for knowing when there is already an appropriate root folder.There's also the special check for `(directoryPath.indexOf(path.join(existingPath, path.sep)) is 0)`, which seems specific to `DefaultDirectoryProvider`. The idea of `contains()` is specific to a `Directory`, which is the thing we're trying to create, so it doesn't exist yet.
But we have the list of existing `Directory` objects, so can we check whether any of them `contains` the new path/URI?
Sure. I'll have to see if `Directory.contains(arg)` does the right thing when `arg` is not normalized.
Yeah, good point. If not, I'd like to implement said behavior so that we can simplify the `DirectoryProvider` interface.
I would say :fire: these assertions about `.directoryProviders`, as that property is private.
I still think that if an unrecognized URI is given, this _should_ happen. The `DefaultDirectoryProvider` should return `null` unless the URI is for a local file. That way, this would actually be a useful error.I also still think the `DefaultDirectoryProvider` should be tried first, not last, and that it should simply be called `LocalDirectoryProvider`. Do you have concerns with always using that provider for local files?
For readability with the `it`, I'd say:``` coffeeit "uses the default directory provider if no custom provider can handle the URI", ->```
:cyclone: As per conversation with @bolinfest, I think this current approach is actually better.
so rewritten
