@bartonjs Does this look right to you?
  Neutral
ECDsaSecurityKey is a wrapper class for creating keys to be used for ECDsaCng algo.
  Negative
we can have the var inside the #if since #if is a compiler switch.
  Neutral
I think it would be cleaner to throw inside Resolve...
we should put '_' in instance variables.
  Negative
We are not consistent with LogHelper.
  Negative
Sometimes we use it sometimes we don't.
  Neutral
Is there any reason not to use it?
  Neutral
As above I think we should just throw inside here.
  Neutral
As above I think we should just throw inside here.
  Neutral
What will a user do with this?
  Neutral
What will a user do with this?
  Neutral
When I changed throw => LogHelper, some of them were missed.
  Negative
All of them should be LogHelper.
  Neutral
If they want to access the private part of the blob.
  Neutral
Once a private blob is used to generate a CngKey, they can only export the public blob.
  Negative
This is the blob format used to generate the CngKey.
  Negative
It is basically a string wrapper.
  Neutral
This is used to identify the blob format used to create the cngkey -  eccpublic or eccprivate or generic.
  Negative
Users might be able to get to this using CngKey.GetProperty but I think its useful to have it as first class property.
  Negative
extra line
Do we need to make this call to GetHashAlgorithm for ECD?
  Neutral
No, not for EC.
  Neutral
I moved the statement to if blocks of rsa and x509.
  Positive
We don't need to create the hash if clr returns RSACryptoServiceProvider because Sign and VerifyData take the hash.Name.
  Negative
Is there a way to just use the name?
  Neutral
It does not create an hashAlgorithm object.
  Negative
HashAlgorithmName is only a struct (more like a string wrapper), and is not as expensive as SHA1.Create().
  Negative
I looked through the .
  Neutral
net code and it seems, we should not create an "HashAlgorithm" object in any case since .
  Negative
net creates an HashAlgorithm again.
  Positive
We should always pass the string representation to .
  Negative
net.
  Neutral
Have you considered removing these fields and using private-set properties?
  Positive
I think a constructor directly taking the `CngKey` might be useful.
  Negative
nit: the case used in file name differs from the one used for the class name :trollface: 
I guess it depends on whether the key was marked as exportable or not when instantiating the key (using `ExportPolicy = CngExportPolicies.AllowPlaintextExport`).
  Negative
I think it might be a good idea to remove this `Blob` property and let the user decide whether he/she wants the private part to be exportable via `CngKey.Export(CngKeyBlobFormat.EccPrivateBlob)`.
  Negative
:+1: 
thanks, we should fix this.
  Positive
Sounds good.
  Positive
will add that.
  Neutral
If you're just sticking with blobs; those are the two that exist right now.
  Neutral
I don't know how to determine if an already open handle has a private key, though (other than to just use it and see).
  Negative
Makes sense.
  Neutral
I will remove this property.
  Positive
We are going to add one more constructor that takes a CngKey so blobs won't be available then.@AtsushiKan do you have any insights into how we can determine whether a CngKey has privateKey or just publicey?
  Negative
Nothing comes to mind.
  Positive
Might want to ask the WinCrypto guys on an internal email.
  Neutral
