Super minor, but this looks like a hard tab (`\t`) here
Should this be `prefix is buffer.slice(0, prefix.length)`? is `equals` a String method? Not familiar with it.
Oh, they are buffers, nevermind.
Should this include any of the options in the `defaultOptions` object from `src/babel.coffee`? Not sure what the default options are for source maps.
Oh damn, thanks. I had turned of `softTabs` for testing something, and was accidentally sprinkling hard tabs everywhere.
:+1: Yeah
Ok, so I just grabbed the data by requiring `src/babel`, which is a bit weird. Do you think I should extract those options into some separate file, or just leave it like that for now?
> Do you think I should extract those options into some separate file, or just leave it like that for now?I think leaving it for now is fine.
`.json` isn't needed here
Might be nice to use consistent quotes on this line, looks like single is the pattern in this file
Was there a reason not to follow this pattern for `.cson` files as well?
JSON.parse handles Buffers, the `toString` isn't needed.
Missing space before `{`
Missing space before `{`
It looks like this file is required before the module cache is set up in `index.js`.That means any libraries required here and downstream won't pass through it. It would be nice to address that so there aren't any performance regressions.
Just curious, how long does this require take in the browser process?  Just want to make sure the browser process load time is minimally impacted.
Looks like the `convertedLines` are joined and then immediately split again now on the next line.
Where are these covered now?
It would be nice to inline this into Atom's root mega `package.json` file since all other `.json` and `.cson` files are currently placed there instead of bundled separately.
Are there specs for this file? I would imagine something similar to the babel/typescript ones
:+1: Good call. It seems like this would be addressed if we did the following:1. Defer the require of `coffee-script` like we talked about2. Move the setup for CSON back _out_ of `compile-cache.js`, and into `index.js` after the `ModuleCache` is set up3. Don't use `underscore-plus` in `compile-cache.js` or `babel.js`That way, no new libraries will be required before the module cache. What do you think?
We had to change the code for typescript, coffee and babel to make source maps work properly. It would have been nice to refactor the CSON code to use the same pattern, but there wasn't a pressing need to touch `season`, so we left it as is for now.
After thinking about this more, it probably isn't worth the effort/complexity, feel free to disregard.
> What do you think?Sounds good.
:see_no_evil: Thanks; I was kind of blindly hacking away there.
I figured this was tested via the fact that the test suite loaded at all. It seemed kinda weird to add a coffee-script spec that tests that another coffee-script file can be required.
Yeah, would be nice though to somewhere test that cache files are written and files with the same content are only compiled once.Basically, what coffee-cash was testing now that that logic is being done here.
This is going to require a change in https://github.com/atom/timecop/blob/master/lib/cache-panel-view.coffee to get timecop working again.
Are read errors handled internally by `source-map-support` or would a read error here cause a notification?
Woah thanks for the heads up. PR for that here: https://github.com/atom/timecop/pull/13
