Could call it boxLog instead of fancyLog?
does this mean these get served from something like assets/code-studio/assets?
Since they are copied into dashboard/public and also have a precompiled asset rule, they get served in two places:1. Unprocessed, unfingerprinted at [domain]/code-studio/assets/2. Preprocessed and fingerprinted at [domain]/assets/[fingerprinted filename]Option 1 should always be the same, and can be hard-coded as a root-relative URL if needed (I do that in a few places for video.js), but isn't effectively cachebusted, so it's a poor choice for anything we expect to change ourselves.  This is a good option for assets that libraries want to access themselves at runtime.Option 2 currently requires you to use a Rails asset helper to get the correct URL, but will be cachebusted appropriately because of that.  We'll want Rails to generate a manifest of some sort to allow our JavaScript to reference assets this way.
I went with `logBoxedMessage`.
This file both moved and renamed from videos.js.erb, with some additional changes necessary.  Major changes:- Require video.js and url_test.js instead of depending on their global availability.- Dropped the wrapper function since browserify does that for us now.- One other adjustment that I'll comment inline.- Small syntax adjustments to pass linting.
I didn't change this, but dropping a note that this appears to be the source of the bug with the fallback player and the "Show Notes" tab.  For some reason, we remove the `src` attribute to hide the player?  When using the Flash fallback player, there is no such attribute, which explains why nothing happens to it.  I think `stopTrackingVideoJSProgress()` was originally supposed to help with this, but it doesn't do anything to pause/hide the video.
I added the guards, here and just below.  The functions `stopTrackingProgress()` and `stopTrackingCurrentTime()` do exist in the version of video.js that we're using, but in the minified version that gets required when using the node module the symbols have been changed/minified.  It's unclear whether these functions were ever intended to be public.  It is possible that some video.js Player objects (for certain fallbacks) have these functions so I'm leaving them in, guarded.I tried to recreate the issue described in the function comment here, but was unable to - this code is original to Geoffrey Elliot from when the repo was set up, and I wonder if our implementation has improved since then.There _is_ an existing issue which I mention in the PR description with hiding the fallback video player, which is where this code is used - so I think the best time to tackle this (or remove this method entirely) is when fixing that bug, which belongs in a different PR.
Keeping this note so we can preserve the order of these includes as we move things over to code-studio.js.
Here's the old `stopTrackingVideoJSProgress()` for reference.
This compiles into a plain CSS @import directive:``` css@import url(/code-studio/assets/video-js/video-js.css);```This works fine for now, although it adds a file for the client to download.  Eventually I'd like to concatenate this into a code-studio version of application.css, though it'll take some doing since sass doesn't have native support for concatenating in plain css files (which is pretty dumb, since they're valid scss).
This goes away because it's moved up to application.html.haml.
This goes away because it's moved up to application.html.haml.
:tada: :trophy: :clap: 
A whole separate issue is why the `require('video.js')` is including a minified module, and whether there's a good way around that.  Wouldn't it be preferable to import the unminified library and do our own minification?
> I tried to recreate the issue described in the function comment here, but was unable to - this code is original to Geoffrey Elliot from when the repo was set up, and I wonder if our implementation has improved since then.You can check the old (private) [code-dot-org/dashboard](https://github.com/code-dot-org/dashboard) repo for earlier git history.The original code was actually added by @bcjordan in code-dot-org/dashboard#1049 (07/2014). Doubt he remembers much from that long ago but I'll ping him on this thread just in case he can help shed some light on anything.
my copy-paste-bloat senses are starting to tingle a bit here with this third `build_commands.browserify` entry. Maybe in a future pass we can collapse this set of verbose javascript configuration lines into a more compact declarative format before they spiral too out of control?
Yeah, I started feeling that too after a bit.  Actually, I think I'd like to make this improvement with my upcoming change that adds the `reactify` and `require-globify` transforms.
Those links 404 for me.  I know I've seen that repo before. Do I need permission to see it or something?
yes, it's a private repo, you need to follow the link after logged into your github account i believe.(edit: changed access settings on the repo, which might make it show up for you now)
Well, it looks like the code hasn't changed _that_ much since then and we're still using the same version of videojs_rails, which implies that I may be reintroducing the repeating JavaScript error when changing tabs before the player initializes.Reading through the current version of the plugin we use, it does look like this is code we were never meant to touch (it's a fallback feature for older media players) and I'm fairly certain the problem would go away if we wrote the code to pause the fallback player when switching tabs.  In fact, I'll do just that.
If I'm wrong, I'll also make the argument that the existing bug that never actually hides the fallback player when you change tabs prevents this particular bug from ever happening :grin:
> A whole separate issue is why the require('video.js') is including a minified module, and whether there's a good way around that. Wouldn't it be preferable to import the unminified library and do our own minification?video.js is an _extremely_ complicated project on its own and I don't think we want to start digging into its internal build-chain unless we have specific reason to. The v4.5.2 [artifact](https://github.com/videojs/video.js/blob/v4.5.2/dist/video-js/video.js) published via npm (see [package.json](https://github.com/videojs/video.js/blob/v4.5.2/package.json#L22)) is the minified pre-compiled JS asset (presumably bundled up as a UMD-compatible module), so I'd suggest we stick with using that vendor-supplied file as long as it works.
I wasn't suggesting we do some workaround to include their unminified source (which they do provide as video.dev.js).  I was just curious why they did it that way.Maybe a better question is why the videojs_rails gem we were using was _not_ using the minified version they ship?
Last year, I experimented with extracting video.js into a self-contained js bundle, so it could be cleanly separated from the dashboard application.js. (I abandoned the effort at the time, because of how complicated and time-consuming working with and testing video.js changes ended up being.)In that work I managed to get a decent system going using the [browserify-css](https://github.com/cheton/browserify-css) plugin, which not only supported inlining css into a browserify bundle, but also supported transforming css relative-url directives according to custom logic, so css-referenced assets could resolve correctly after the inlining transformation. See  the code here: [bundle.js](https://github.com/code-dot-org/code-dot-org/blob/rewrite_youtube_embed-3/shared/js/video/bundle.js#L25-L44)
ah, if an unminified dev version is also provided then yeah, it might be preferable to link to that version if possible. Maybe something like `require('video.js/dist/video-js/video.dev')` instead of `require('video.js')`?
And yeah, I have no idea why they link to the minified source as the package `main`. I know that in the past they used a custom Closure Compiler configuration to heavily mangle the final output, so maybe it was something related to that?
Interesting - I hadn't thought of using browserify for this.  It's a [much-requested feature](https://github.com/sass/sass/issues/556) of sass to be able to inline css files but they keep pushing back because it doesn't play nice with their "It's just CSS" philosophy.I was going to try out [node-sass-css-importer](https://www.npmjs.com/package/node-sass-css-importer) which requires you to be explicit (special syntax) when asking to inline CSS, but that seems okay to me.
Here's a [quick experiment with a custom SASS importer](https://github.com/code-dot-org/code-dot-org/compare/create-code-studio-scss) (a feature they claim is experimental, but it's been around since the last major version).  It seems to work great; unfortunately I discovered video.js is a poor candidate for using this, because their CSS file contains relative references to font files they need to load.
